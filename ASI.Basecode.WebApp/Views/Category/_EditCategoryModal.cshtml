@model ASI.Basecode.Services.ServiceModels.CategoryViewModel

<div class="modal fade" id="editCategoryModal" data-bs-keyboard="false" tabindex="-1" aria-labelledby="editCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="editCategoryModalLabel">Edit Categories</h2>
                <button type="button" class="btn-close close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form asp-action="Edit" method="post" id="editCategoryForm">
                    <input type="hidden" asp-for="CategoryId" id="EditCategoryId" />
                    <input type="hidden" asp-for="CategoryDateCreated" id="EditCategoryDate" />

                    <div class="form-group mb-3">
                        <input asp-for="Name" class="form-control input-field" placeholder="Category Name" id="EditName" />
                        <span asp-validation-for="Name" class="text-danger"></span>
                    </div>
                    <div class="form-group mb-4">
                        <textarea asp-for="Description" class="form-control textarea-field" placeholder="Description" id="EditDescription"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>
                    <div class="text-center">
                        <button type="button" name="cancelEdit" data-bs-dismiss="modal" class="btn btn-outline-success  px-4 me-1">Cancel</button>
                        <button type="submit" name="saveEdit" class="btn btn-custom  px-4">Save Edit</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript to Load Category Data and Populate Modal -->
<script>
    let editCategoryModal;  // Declare the modal globally

    document.addEventListener('DOMContentLoaded', function () {
        const modalElement = document.getElementById('editCategoryModal');
        if (modalElement) {
            editCategoryModal = new bootstrap.Modal(modalElement);
        } else {
            console.error("Edit modal not found in DOM!");
        }

        modalElement.addEventListener('hidden.bs.modal', function () {
            resetEditForm();  // Reset form on modal close
        });
    });

    function openEditCategoryModal(categoryId) {
        fetch(`/Category/Edit/${categoryId}`)
            .then(response => {
                if (!response.ok) {
                    return response.json().then(error => { throw new Error(error.message); });
                }
                return response.json();
            })
            .then(category => {
                populateModalFields(category); // Populate modal fields with expense data

                if (editCategoryModal) {
                    editCategoryModal.show();
                } else {
                    console.error("Modal instance not initialized.");
                }
            })
            .catch(error => {
                console.error('Error fetching expense:', error);
                alert("Error fetching expense: " + error.message);
            });
    }

    // Function to populate modal fields with fetched expense data
    function populateModalFields(category) {
        document.getElementById("EditCategoryId").value = category.categoryId;
        document.getElementById("EditName").value = category.name;
        document.getElementById("EditDescription").value = category.description;
        document.getElementById("EditCategoryDate").value = category.categoryDateCreated;
    }

    function resetEditForm() {
        const form = document.getElementById('editCategoryForm');
        form.reset();  // Resets all form fields
    }
</script>