@using static ASI.Basecode.Resources.Views.Screen

<!DOCTYPE html>
<html lang="en" data-bs-theme="light">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>


    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/main.css" />
    <link rel="stylesheet" href="~/css/style.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css">

    

    @RenderSection("Styles", required: false)


</head>

<body>

     <script>
     // Apply the theme based on saved preference
     const savedTheme = localStorage.getItem("theme");
     if (savedTheme) {
         document.documentElement.setAttribute('data-bs-theme', savedTheme);
         // Apply the dark-mode class if the saved theme is 'dark'
         if (savedTheme === 'dark') {
             document.body.classList.add('dark-mode');
         }
     }

     document.addEventListener("DOMContentLoaded", function() {
         const switchButton = document.getElementById('flexSwitchCheckDefault');

         // Check the saved theme and set the switch's state
         if (savedTheme === 'dark') {
             switchButton.checked = true;
         } else {
             switchButton.checked = false;
         }

         // Toggle dark mode
         switchButton.addEventListener('change', function() {
             const newTheme = switchButton.checked ? 'dark' : 'light';
             document.documentElement.setAttribute('data-bs-theme', newTheme);
             localStorage.setItem("theme", newTheme); // Save the theme in localStorage

             // Toggle the 'dark-mode' class on the body element
     if (newTheme === 'dark') {
         document.body.classList.add('dark-mode');
     } else {
         document.body.classList.remove('dark-mode');
     }
         });
     });
 </script>



    <!-- Conditional Navbar -->
    @if (!(ViewBag.LoginView == true))
    {
        <header class="navbar">
            @Html.Partial("_Header")
        </header>
    }

    @if (!(ViewBag.LoginView == true))
    {
        <div class="wrapper">
            <!-- Sidebar -->
            @Html.Partial("_Sidebar")

            <div class="content-container">
                <main role="main">
                    @RenderBody()
                </main>
            </div>
        </div>
    }
    else
    {
        <!-- Only Render the Content Container for Login Page -->
        <div class="login-content-container">
            <main role="main">
                @RenderBody()
            </main>
        </div>
    }
   

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.js"></script>
    <script src="https://kit.fontawesome.com/7a7c645416.js" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Configure Toastr options
        toastr.options = {
            positionClass: "toast-top-center", // Set the notification position to center
            timeOut: 3000,
            closeButton: true,
            progressBar: true
        };
    </script>

    

    @section Scripts {
        <script>
            document.addEventListener("DOMContentLoaded", function () {
                const menuLinks = document.querySelectorAll(".menu a");

                menuLinks.forEach(link => {
                    link.addEventListener("click", function () {
                        menuLinks.forEach(item => item.classList.remove("active"));
                        this.classList.add("active");
                    });
                });
            });
        </script>
    }

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
