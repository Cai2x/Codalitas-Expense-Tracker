@model ASI.Basecode.Services.ServiceModels.ExpenseViewModel

<div class="modal fade" id="deleteExpenseModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content delete-modal-content">
            <div class="modal-body delete-modal-body text-center">
                <div class="mb-3">
                    <span class="display-1 text-danger">&times;</span>
                </div>
                    <input type="hidden" asp-for="ExpenseId" id="DeleteExpenseId"/>

                    <h5 class="modal-title mb-3">Are you sure?</h5>
                    <p>Do you really want to delete these records? This process cannot be undone.</p>
                    <div class="d-flex justify-content-center mb-3">
                        <button type="button" class="btn btn-secondary deleteModal-Button mr-2" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" id="deleteExpenseButton" class="btn btn-danger deleteModal-Button">Delete</button>
                    </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Function to open the modal and populate data
    function openDeleteModal(expenseId) {
        fetch(`/Expense/Delete/${expenseId}`)
            .then(response => {
                if (!response.ok) {
                    return response.json().then(error => { throw new Error(error.message); });
                }
                return response.json();
            })
            .then(expense => {
                populateModalFields(expense); // Populate modal fields with expense data

                // Open the modal programmatically
                const deleteExpenseModal = new bootstrap.Modal(document.getElementById('deleteExpenseModal'));
                deleteExpenseModal.show();
            })
            .catch(error => {
                console.error('Error fetching expense:', expenseId);
                alert("Error fetching expense: " + error.message);
            });
    }

    // Function to populate modal fields with fetched expense data
    function populateModalFields(expense) {
        document.getElementById("DeleteExpenseId").value = expense.expenseId;
    }

    // Close the modal when the close button is clicked
    document.querySelector('.btn-close').addEventListener('click', function () {
        const editExpenseModal = bootstrap.Modal.getInstance(document.getElementById('deleteExpenseModal'));
        editExpenseModal.hide(); // Explicitly hide the modal when the close button is clicked
    });

    // Handle form submission and close the modal
    document.querySelector('deleteExpenseButton').addEventListener('submit', function (event) {
        event.preventDefault(); // Prevent form from submitting normally
        const deleteExpenseModal = bootstrap.Modal.getInstance(document.getElementById('deleteExpenseModal'));

        // Handle form submission here
        fetch(`/Expense/PostDelete/${expenseId}`, {
            method: 'POST',
            body: new FormData(event.target), // Serialize form data
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Expense saved successfully!');
                    editExpenseModal.hide(); // Hide the modal after success
                } else {
                    alert('Failed to save expense');
                }
            })
            .catch(error => {
                console.error('Error saving expense:', error);
                alert('Error saving expense');
            });
    });
</script>