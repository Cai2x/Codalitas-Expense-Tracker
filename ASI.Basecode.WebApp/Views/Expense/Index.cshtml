@model IEnumerable<ASI.Basecode.Services.ServiceModels.ExpenseViewModel>

@{
    ViewData["Title"] = "Expenses";
}
@section styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Newsreader:wght@400;700&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.4/toastr.min.css" />
    <link rel="stylesheet" href="~/css/expense.css"/>
}

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">


<div class="page-container">

    <div class="expenses-header d-flex justify-content-between align-items-center">
        <h1>Expenses</h1>
        <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addExpenseModal">
            <i class="fas fa-plus-circle"></i>  Add Expenses
        </button>
    </div>
    <hr class="expenses-divider">

    <div class="table-container">
        <!-- Filters and Title Section -->
        <div class="d-flex align-items-center justify-content-between mb-1">
            <!-- Title Section -->
            <h2 class="mb-0">My Expenses</h2>

            @if (Model != null && Model.Any())
            {
                <div class="search-bar">
                    <input type="text" placeholder="Search Expenses" id="search" oninput="applyFilterSort()">
                </div>

                <!-- Filters Section -->
                <div class="filters d-flex align-items-center">
                    <h5 class="mb-0">Category</h5>
                <select class="form-select-sm me-2" id="filterCategory" onchange="applyFilterSort()">
                </select>

                    <h5 class="mb-0">Sort by</h5>
                <select class="form-select-sm" id="sortExpenses" onchange="applyFilterSort()">
                    <option value="">N/A</option>
                    <option value="amount_asc">Amount (Low to High)</option>
                    <option value="amount_desc">Amount (High to Low)</option>
                    <option value="date_asc">Date (Oldest First)</option>
                    <option value="date_desc">Date (Newest First)</option>
                </select>

            </div>
            }
        </div>


        <!-- Table Section -->
        @if (Model == null || !Model.Any())
        {
            <p class="text-center">No expenses found.</p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Subject</th>
                        <th>Category</th>
                        <th>Amount</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => item.Title)</td>
                            <td>
                                <span class="badge bg-secondary">@item.CategoryName</span>
                            </td>
                            <td>@item.Amount.ToString("C")</td>
                            <td>
                                @if (item.Status)
                                {
                                    <span class="badge bg-success">Published</span>
                                }
                                else
                                {
                                    <span class="badge bg-warning">Draft</span>
                                }
                            </td>
                            <td>
                                <a href="javascript:void(0);" onclick="openEditModal(@item.ExpenseId)" class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#editExpenseModal">
                                    <i class="fas fa-pencil-alt"></i>
                                </a>
                                <a href="javascript:void(0);" onclick="openDeleteModal(@item.ExpenseId)" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteExpenseModal">
                                    <i class="fas fa-trash"></i>
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        <!----Pagination to diri---->
        <div class="pagination-container text-center">
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center">
                </ul>
            </nav>
        </div>
    </div>
</div>


<!--To Call the expenseviewmodel-->
<partial name="_ExpenseModal" model="new ASI.Basecode.Services.ServiceModels.ExpenseViewModel()"/>
<partial name="_EditExpenseModal" model="new ASI.Basecode.Services.ServiceModels.ExpenseViewModel()" />
<partial name="_DeleteExpenseModal" model="new ASI.Basecode.Services.ServiceModels.ExpenseViewModel()" />

@section scripts {

    <script src="~/js/func.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        // Check for error message and display Toastr notification
        var errorMessage = '@TempData["ErrorMessage"]';
        if (errorMessage) {
            toastr.error(errorMessage);
        }

        // Check for success message and display Toastr notification
        var successMessage = '@TempData["SuccessMessage"]';
        if (successMessage) {
            toastr.success(successMessage);
        }
    </script>

    <script>
        // Initialize global variables to store the current sort and page
        let currentPage = 1;
        let currentSort = '';
        let currentCategory = '';
        let currentSearch = '';

        // When the sort dropdown changes, call the applySort function
        function applyFilterSort() {
            currentSort = document.getElementById('sortExpenses').value;  // Get the selected sorting option
            currentCategory = document.getElementById('filterCategory').value;
            currentSearch = document.getElementById('search').value;
            loadData(1, currentSearch, currentSort, currentCategory);  // Fetch sorted and paginated data
        }

        document.addEventListener('DOMContentLoaded', function () {
            const categoryFilter = document.getElementById('filterCategory');
            fetchCategories(categoryFilter, null); // Call the function to populate categories

            let totalPagesFromServer = @ViewBag.TotalPages; // Access ViewBag values for totalPages
            let currentPageFromServer = @ViewBag.CurrentPage; // Access ViewBag values for currentPage
            updatePagination(totalPagesFromServer, currentPageFromServer);
        });
    </script>
}