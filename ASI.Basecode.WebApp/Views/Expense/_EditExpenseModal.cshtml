@model ASI.Basecode.Services.ServiceModels.ExpenseViewModel

<!-- Edit Expense Modal -->
<div class="modal fade" id="editExpenseModal" tabindex="-1" aria-labelledby="editExpenseModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content modal-cstm">
            <div class="modal-header">
                <h2 class="addExpense-title" id="editExpenseModalLabel">Edit Expense</h2>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editExpenseForm">
                    <!-- Hidden input to store the Expense ID -->
                    <input type="hidden" asp-for="ExpenseId" id="EditExpenseId"/>

                    <!-- Title Field -->
                    <div class="form-group mb-3">
                        <input asp-for="Title" class="form-control addExpense-field" id="EditTitle" />
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>

                    <!-- Expense Date Field -->
                    <div class="form-group mb-3">
                        <input asp-for="Date" type="date" class="form-control addExpense-field" id="EditDate" />
                        <span asp-validation-for="Date" class="text-danger"></span>
                    </div>

                    <!-- Amount Field -->
                    <div class="form-group mb-3">
                        <input asp-for="Amount" id="EditAmount" class="form-control addExpense-field" placeholder="Amount" />
                        <span asp-validation-for="Amount" class="text-danger"></span>
                    </div>

                    <!-- Category Dropdown -->
                    <div class="form-group mb-3">
                        <select asp-for="CategoryId" id="categoryDropdownEdit" name="CategoryId" class="form-select addExpense-field"></select>
                        <div class="text-end mt-2">
                            <a href="#" class="text-muted">Create New Category List</a>
                        </div>
                        <span asp-validation-for="CategoryId" class="text-danger"></span>
                    </div>

                    <!-- Description Field -->
                    <div class="form-group mb-4">
                        <label asp-for="Description" class="control-label"></label>
                        <textarea asp-for="Description" id="EditDescription" class="form-control box-input" rows="4" placeholder="Description"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>

                    <!-- Action Buttons -->
                    <div class="text-center">
                        <input type="hidden" id="EditStatus" name="Status" value="false" />

                        <button type="submit" name="saveAsDraft" class="btn btn-outline-success btn-md px-4" onclick="setEditStatus(false)">Draft</button>
                        <button type="submit" name="saveAsPublish" class="btn btn-custom btn-md px-4" onclick="setEditStatus(true)">Save and Publish</button>
                    </div>

                    <script>
                        function setEditStatus(isPublished) {
                            document.getElementById('EditStatus').value = isPublished;
                        }
                    </script>
                </form>

            </div>
        </div>
    </div>
</div>

<script src="~/js/func.js"></script>
<!-- JavaScript to Load Expense Data and Populate Modal -->
<script>
    let editExpenseModal;  // Declare the modal globally

    document.addEventListener('DOMContentLoaded', function () {
        const modalElement = document.getElementById('editExpenseModal');
        if (modalElement) {
            editExpenseModal = new bootstrap.Modal(modalElement);
        } else {
            console.error("Edit modal not found in DOM!");
        }

        modalElement.addEventListener('shown.bs.modal', function () {
        const expenseId = document.getElementById('EditExpenseId').value;
        openEditModal(expenseId);
         });

        modalElement.addEventListener('hidden.bs.modal', function () {
            resetEditForm();  // Reset form on modal close
        });
    });

    // Function to open the modal and populate data
    function openEditModal(expenseId) {
    fetch(`/Expense/Edit/${expenseId}`)
        .then(response => response.json())
        .then(expense => {
            populateModalFields(expense);
            const categoryDropdownEdit = document.getElementById('categoryDropdownEdit');
            fetchCategories(categoryDropdownEdit,expense.categoryId);
        })
        .catch(error => {
            console.error('Error fetching expense:', error);
            alert("Error fetching expense: " + error.message);
        });
}

    // Function to populate modal fields with fetched expense data
    function populateModalFields(expense) {
        try{
        document.getElementById("EditExpenseId").value = expense.expenseId;
        document.getElementById("EditTitle").value = expense.title;
        document.getElementById("EditDate").value = expense.date.split('T')[0]; // Format date
        document.getElementById("EditAmount").value = expense.amount;
        document.getElementById("EditDescription").value = expense.description;
        }
        catch(error){
             console.error("Error populating modal fields:", error);
        }
    }

    var editUrl = '@Url.Action("Edit", "Expense")';
    document.getElementById('editExpenseForm').addEventListener('submit', function (event) {
    event.preventDefault();  // Prevent default form submission

    var formData = new FormData(this);

    // Submit form data via AJAX
    $.ajax({
        url: editUrl + "?currentPage=" + currentPage,  // Ensure the correct controller and action are used
        type: 'POST',
        data: formData,
        processData: false,
        contentType: false,
        success: function (response) {
            if (response.success) {
                // Show success message using toastr
                toastr.success('Expense updated successfully!');
                loadData(currentPage, currentSearch, currentSort, currentCategory);
                editExpenseModal.hide();
                document.body.classList.remove('modal-open');
                document.querySelector('.modal-backdrop').remove();
            } else {
                toastr.error('Error updating expense.');
            }
        },
        error: function () {
            toastr.error('Error submitting form.');
        }
        });
    });

    function resetEditForm() {
        const form = document.getElementById('editExpenseForm');
        form.reset(); 

        const categoryDropdown = document.getElementById('categoryDropdownEdit');
        categoryDropdown.selectedIndex = -1;
    }
</script>