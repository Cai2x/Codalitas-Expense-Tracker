@model ASI.Basecode.Services.ServiceModels.ExpenseViewModel

<!-- Edit Expense Modal -->
<div class="modal fade" id="editExpenseModal" tabindex="-1" aria-labelledby="editExpenseModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content modal-cstm">
            <div class="modal-header">
                <h2 class="addExpense-title" id="editExpenseModalLabel">Edit Expense</h2>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form asp-action="Edit">
                    <!-- Hidden input to store the Expense ID -->
                    <input type="hidden" asp-for="ExpenseId" />

                    <!-- Title Field -->
                    <div class="form-group mb-3">
                        <input asp-for="Title" class="form-control addExpense-field" />
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>

                    <!-- Expense Date Field -->
                    <div class="form-group mb-3">
                        <input asp-for="ExpenseDateCreated" class="form-control addExpense-field" />
                        <span asp-validation-for="ExpenseDateCreated" class="text-danger"></span>
                    </div>

                    <!-- Amount Field -->
                    <div class="form-group mb-3">
                        <input asp-for="Amount" id="Amount" class="form-control addExpense-field" placeholder="Amount" />
                        <span asp-validation-for="Amount" class="text-danger"></span>
                    </div>

                    <!-- Category Dropdown -->
                    <div class="form-group mb-3">
                        <select asp-for="CategoryId" id="CategoryId" name="CategoryId" class="form-select addExpense-field">
                            <option value="" disabled selected hidden>Select Category</option>
                        </select>
                        <div class="text-end mt-2">
                            <a href="#" class="text-muted">Create New Category List</a>
                        </div>
                        <span asp-validation-for="CategoryId" class="text-danger"></span>
                    </div>

                    <!-- Description Field -->
                    <div class="form-group mb-4">
                        <label asp-for="Description" class="control-label"></label>
                        <textarea asp-for="Description" id="Description" class="form-control box-input" rows="4" placeholder="Description"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>

                    <!-- Action Buttons -->
                    <div class="text-center">
                        <button type="button" class="btn btn-outline-success btn-md px-4" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-custom btn-md px-4">Save Edit</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript to Load Expense Data and Populate Modal -->
<script>
    // Function to open the modal and populate data
    function openEditModal(expenseId) {
        fetch(`/Expense/Edit/${expenseId}`)
            .then(response => {
                if (!response.ok) {
                    return response.json().then(error => { throw new Error(error.message); });
                }
                return response.json();
            })
            .then(expense => {
                populateModalFields(expense); // Populate modal fields with expense data
                fetchCategories(expense.CategoryId); // Fetch categories and set selected one

                // Open the modal programmatically
                const editExpenseModal = new bootstrap.Modal(document.getElementById('editExpenseModal'));
                editExpenseModal.show();
            })
            .catch(error => {
                console.error('Error fetching expense:', error);
                alert("Error fetching expense: " + error.message);
            });
    }

    // Function to populate modal fields with fetched expense data
    function populateModalFields(expense) {
        document.getElementById("ExpenseId").value = expense.ExpenseId;
        document.getElementById("Title").value = expense.Title;
        document.getElementById("ExpenseDateCreated").value = expense.ExpenseDateCreated.split('T')[0]; // Format date
        document.getElementById("Amount").value = expense.Amount;
        document.getElementById("Description").value = expense.Description;
    }

    // Fetch categories and set the selected one based on the expense data
    function fetchCategories(selectedCategoryId) {
        fetch('/Expense/Category')
            .then(response => response.json())
            .then(data => {
                const dropdown = document.getElementById('CategoryId');
                dropdown.innerHTML = ''; // Clear existing options

                // Default option
                const defaultOption = document.createElement('option');
                defaultOption.value = "";
                defaultOption.textContent = "Select Category";
                defaultOption.disabled = true;
                defaultOption.selected = true;
                defaultOption.hidden = true;
                dropdown.appendChild(defaultOption);

                // Populate categories and select the correct one
                data.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category.categoryId;
                    option.textContent = category.name;
                    if (category.categoryId == selectedCategoryId) {
                        option.selected = true;
                    }
                    dropdown.appendChild(option);
                });
            })
            .catch(error => console.error('Error fetching categories:', error));
    }
</script>
