@model ASI.Basecode.Services.ServiceModels.ExpenseViewModel

<!-- Edit Expense Modal -->
<div class="modal fade" id="editExpenseModal" tabindex="-1" aria-labelledby="editExpenseModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content modal-cstm">
            <div class="modal-header">
                <h2 class="addExpense-title" id="editExpenseModalLabel">Edit Expense</h2>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form asp-action="Edit" method="post" id="editExpenseForm">
                    <!-- Hidden input to store the Expense ID -->
                    <input type="hidden" asp-for="ExpenseId" id="EditExpenseId"/>

                    <!-- Title Field -->
                    <div class="form-group mb-3">
                        <input asp-for="Title" class="form-control addExpense-field" id="EditTitle" />
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>

                    <!-- Expense Date Field -->
                    <div class="form-group mb-3">
                        <input asp-for="ExpenseDateCreated" type="date" class="form-control addExpense-field" id="EditExpenseDateCreated" />
                        <span asp-validation-for="ExpenseDateCreated" class="text-danger"></span>
                    </div>

                    <!-- Amount Field -->
                    <div class="form-group mb-3">
                        <input asp-for="Amount" id="EditAmount" class="form-control addExpense-field" placeholder="Amount" />
                        <span asp-validation-for="Amount" class="text-danger"></span>
                    </div>

                    <!-- Category Dropdown -->
                    <div class="form-group mb-3">
                        <select asp-for="CategoryId" id="categoryDropdownEdit" name="CategoryId" class="form-select addExpense-field"></select>
                        <div class="text-end mt-2">
                            <a href="#" class="text-muted">Create New Category List</a>
                        </div>
                        <span asp-validation-for="CategoryId" class="text-danger"></span>
                    </div>

                    <!-- Description Field -->
                    <div class="form-group mb-4">
                        <label asp-for="Description" class="control-label"></label>
                        <textarea asp-for="Description" id="EditDescription" class="form-control box-input" rows="4" placeholder="Description"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>

                    <!-- Action Buttons -->
                    <div class="text-center">
                        <button type="button" class="btn btn-outline-success btn-md px-4" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-custom btn-md px-4">Save Edit</button>
                    </div>
                </form>

            </div>
        </div>
    </div>
</div>

<!-- JavaScript to Load Expense Data and Populate Modal -->
<script>
    function openEditModal(expenseId) {
        fetch(`/Expense/Edit/${expenseId}`)
            .then(response => response.json())
            .then(expense => {
                populateModalFields(expense);
                fetchEditCategories(expense.categoryId);
                const editModal = new bootstrap.Modal(document.getElementById('editExpenseModal'));
                editModal.show();
            })
            .catch(error => alert("Error fetching expense: " + error.message));
    }

    function fetchEditCategories(selectedCategoryId) {
        fetch('/Expense/Category')
            .then(response => response.json())
            .then(data => {
                const dropdown = document.getElementById('categoryDropdownEdit');
                dropdown.innerHTML = ''; // Clear existing options

                if (data.success) {
                    data.data.forEach(category => {
                        const option = new Option(category.name, category.categoryId);
                        option.selected = category.categoryId == selectedCategoryId;
                        dropdown.add(option);
                    });
                }
            })
            .catch(error => console.error('Error fetching categories:', error));
    }

    function populateModalFields(expense) {
        document.getElementById("EditExpenseId").value = expense.expenseId;
        document.getElementById("EditTitle").value = expense.title;
        document.getElementById("EditExpenseDateCreated").value = expense.expenseDateCreated.split('T')[0];
        document.getElementById("EditAmount").value = expense.amount;
        document.getElementById("EditDescription").value = expense.description;
    }
</script>

<script>
    document.getElementById('editExpenseForm').addEventListener('submit', function (event) {
        event.preventDefault();
        const form = event.target;

        fetch('/Expense/Edit', {
            method: 'POST',
            body: new FormData(form)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const editModal = bootstrap.Modal.getInstance(document.getElementById('editExpenseModal'));
                editModal.hide();
                location.reload(); // Refresh page or update the UI dynamically
            } else {
                alert('Failed to update expense');
            }
        })
        .catch(error => console.error('Error saving expense:', error));
    });
</script>

